{"ast":null,"code":"var _jsxFileName = \"C:\\\\USM\\\\2022-2\\\\ANAL\\\\inf236-2022-2-grupo-x\\\\Proyecto\\\\client\\\\src\\\\components\\\\GetData.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\n//import LineChart from './LineChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GetRadon = () => {\n  _s();\n  const [sensor, setData] = useState([]);\n  useEffect(() => {\n    async function obtenerDatos() {\n      const response = await fetch('/api/radon');\n      const data = await response.json();\n      setData(data.Radon);\n    }\n    obtenerDatos();\n  }, []);\n\n  /*\r\n  const [sensorplot, setSensorData] = useState({\r\n      labels: sensor.map((data) => data.ts),\r\n      datasets: [{\r\n          label: \"data sensor\",\r\n          data: sensor.Fecha.map((data) => data.value),\r\n      }]\r\n  })\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: sensor.map(datos => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [\" \", datos.value, \" \"]\n    }, datos.ts, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n_s(GetRadon, \"TEV+a4k5ViFp/xF3/MgmpqUBpBo=\");\n_c = GetRadon;\nexport default GetRadon;\nvar _c;\n$RefreshReg$(_c, \"GetRadon\");","map":{"version":3,"names":["React","useEffect","useState","GetRadon","sensor","setData","obtenerDatos","response","fetch","data","json","Radon","map","datos","value","ts"],"sources":["C:/USM/2022-2/ANAL/inf236-2022-2-grupo-x/Proyecto/client/src/components/GetData.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\n//import LineChart from './LineChart';\r\n\r\n\r\nconst GetRadon = () => {\r\n\r\n    const [sensor, setData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function obtenerDatos() {\r\n            const response = await fetch('/api/radon');\r\n            const data = await response.json();\r\n            setData(data.Radon);\r\n        }\r\n\r\n        obtenerDatos();\r\n    }, []);\r\n\r\n    /*\r\n    const [sensorplot, setSensorData] = useState({\r\n        labels: sensor.map((data) => data.ts),\r\n        datasets: [{\r\n            label: \"data sensor\",\r\n            data: sensor.Fecha.map((data) => data.value),\r\n        }]\r\n    })\r\n    */\r\n\r\n    return(\r\n        <div>\r\n            {sensor.map(datos => (\r\n                <li key={datos.ts}> {datos.value} </li>\r\n            ))}\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default GetRadon;\r\n  "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD;AAAA;AAGA,MAAMC,QAAQ,GAAG,MAAM;EAAA;EAEnB,MAAM,CAACC,MAAM,EAAEC,OAAO,CAAC,GAAGH,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACZ,eAAeK,YAAY,GAAG;MAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,CAAC;MAC1C,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;MAClCL,OAAO,CAACI,IAAI,CAACE,KAAK,CAAC;IACvB;IAEAL,YAAY,EAAE;EAClB,CAAC,EAAE,EAAE,CAAC;;EAEN;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI,oBACI;IAAA,UACKF,MAAM,CAACQ,GAAG,CAACC,KAAK,iBACb;MAAA,gBAAqBA,KAAK,CAACC,KAAK;IAAA,GAAvBD,KAAK,CAACE,EAAE;MAAA;MAAA;MAAA;IAAA,QACpB;EAAC;IAAA;IAAA;IAAA;EAAA,QACA;AAGd,CAAC;AAAA,GAhCKZ,QAAQ;AAAA,KAARA,QAAQ;AAkCd,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}