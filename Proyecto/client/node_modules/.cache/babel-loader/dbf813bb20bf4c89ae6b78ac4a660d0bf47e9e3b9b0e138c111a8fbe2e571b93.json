{"ast":null,"code":"var _jsxFileName = \"C:\\\\USM\\\\2022-2\\\\ANAL\\\\inf236-2022-2-grupo-x\\\\Proyecto\\\\client\\\\src\\\\components\\\\GetData.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GetRadon = () => {\n  _s();\n  const [sensor, setData] = useState([]);\n  useEffect(() => {\n    async function obtenerDatos() {\n      const response = await fetch('/api/radon');\n      const data = await response.json();\n      setData(data.Radon);\n    }\n    obtenerDatos();\n  }, []);\n\n  /*\r\n  const [sensorplot, setSensorData] = useState({\r\n      labels: sensor.map((data) => data.ts),\r\n      datasets: [{\r\n          label: \"data sensor Radon\",\r\n          data: sensor.map((data) => data.value)\r\n      }]\r\n  })\r\n  */\n\n  const graphData = {\n    labels: sensor.map(data => data.ts),\n    datasets: [{\n      label: \"data sensor Radon\",\n      data: sensor.map(data => data.value)\n    }]\n  };\n  const options = {\n    responsive: true\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Bar, {\n      options: options,\n      data: graphData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(GetRadon, \"TEV+a4k5ViFp/xF3/MgmpqUBpBo=\");\n_c = GetRadon;\nexport default GetRadon;\nvar _c;\n$RefreshReg$(_c, \"GetRadon\");","map":{"version":3,"names":["React","useEffect","useState","Bar","GetRadon","sensor","setData","obtenerDatos","response","fetch","data","json","Radon","graphData","labels","map","ts","datasets","label","value","options","responsive"],"sources":["C:/USM/2022-2/ANAL/inf236-2022-2-grupo-x/Proyecto/client/src/components/GetData.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\n\r\nconst GetRadon = () => {\r\n\r\n    const [sensor, setData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function obtenerDatos() {\r\n            const response = await fetch('/api/radon');\r\n            const data = await response.json();\r\n            setData(data.Radon);\r\n        }\r\n\r\n        obtenerDatos();\r\n    }, []);\r\n\r\n    /*\r\n    const [sensorplot, setSensorData] = useState({\r\n        labels: sensor.map((data) => data.ts),\r\n        datasets: [{\r\n            label: \"data sensor Radon\",\r\n            data: sensor.map((data) => data.value)\r\n        }]\r\n    })\r\n    */\r\n\r\n    const graphData = {\r\n        labels : sensor.map((data) => data.ts),\r\n        datasets: [\r\n            {\r\n                label: \"data sensor Radon\",\r\n                data: sensor.map((data) => data.value)\r\n            }\r\n        ]\r\n    }\r\n\r\n    const options = {\r\n        responsive: true\r\n    }\r\n\r\n\r\n    return(\r\n        <div>\r\n            <Bar options={options} data={graphData} />\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default GetRadon;\r\n  "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,GAAG,QAAQ,iBAAiB;AAAC;AAGtC,MAAMC,QAAQ,GAAG,MAAM;EAAA;EAEnB,MAAM,CAACC,MAAM,EAAEC,OAAO,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACZ,eAAeM,YAAY,GAAG;MAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,CAAC;MAC1C,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;MAClCL,OAAO,CAACI,IAAI,CAACE,KAAK,CAAC;IACvB;IAEAL,YAAY,EAAE;EAClB,CAAC,EAAE,EAAE,CAAC;;EAEN;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI,MAAMM,SAAS,GAAG;IACdC,MAAM,EAAGT,MAAM,CAACU,GAAG,CAAEL,IAAI,IAAKA,IAAI,CAACM,EAAE,CAAC;IACtCC,QAAQ,EAAE,CACN;MACIC,KAAK,EAAE,mBAAmB;MAC1BR,IAAI,EAAEL,MAAM,CAACU,GAAG,CAAEL,IAAI,IAAKA,IAAI,CAACS,KAAK;IACzC,CAAC;EAET,CAAC;EAED,MAAMC,OAAO,GAAG;IACZC,UAAU,EAAE;EAChB,CAAC;EAGD,oBACI;IAAA,uBACI,QAAC,GAAG;MAAC,OAAO,EAAED,OAAQ;MAAC,IAAI,EAAEP;IAAU;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QACxC;AAGd,CAAC;AAAA,GA7CKT,QAAQ;AAAA,KAARA,QAAQ;AA+Cd,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}